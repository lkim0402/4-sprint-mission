name: CD Workflow - Build & Push to ECR

on:
  push:
    branches: [ "release" ]

jobs:
  # ----------------------------------------------------------------
  # JOB 1: Docker 이미지를 빌드하고 ECR에 푸시
  # ----------------------------------------------------------------
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    outputs:
      #      repo_uri: ${{ steps.prep.outputs.repo_uri }}
      image_tag: ${{ steps.prep.outputs.image_tag }}

    steps:
      # 소스 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # AWS 자격 증명 설정 (secrets 사용)
      - name: AWS CLI 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # ECR 로그인 (계정 ID를 Secret에서 참조)
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      # (선택) 이미지 태그 구성 - 커밋 해시 7자리 +latest
      - name: Prepare tags
        id: prep
        run: |
          echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "REPO_URI=${{ secrets.ECR_REPOSITORY_URI }}" >> $GITHUB_ENV

          echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      #          echo "REPO_URI=${{ secrets.ECR_REPOSITORY_URI }}" >> $GITHUB_OUTPUT

      # Docker 빌드
      - name: Docker build
        run: |
          docker build -t "$REPO_URI:$IMAGE_TAG" -t "$REPO_URI:latest" .

      # ECR 푸쉬
      - name: Docker push
        run: |
          docker push "$REPO_URI:$IMAGE_TAG"
          docker push "$REPO_URI:latest"
  # ----------------------------------------------------------------
  # JOB 2: 새 이미지를 ECS 서비스에 배포
  # ----------------------------------------------------------------
  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: build-and-push # 이 작업이 성공해야한 실행됨

    steps:
      # AWS 자격 증명 설정 (여기서도 필요)
      - name: AWS CLI 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 기존 ECS 태스크 정의 다운로드
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-def.json

      # 디버깅용
      - name: Verify Image URI
        run: |
          echo "Final Image string being used is: ${{ secrets.ECR_REPOSITORY_URI }}:${{ needs.build-and-push.outputs.image_tag }}"
      #          echo "Final Image string being used is: ${{ needs.build-and-push.outputs.repo_uri }}:${{ needs.build-and-push.outputs.image_tag }}"

      # 새 ECR 이미지로 태스크 정의 업데이트
      - name: Fill in new image ID in task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME }}
          image: ${{ secrets.ECR_REPOSITORY_URI }}:${{ needs.build-and-push.outputs.image_tag }}

      # 새 태스크 정의 등록 및 ECS 서비스 업데이트
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: false

      # 배포 상태 확인
      - name: ECS 배포 상태 확인
        run: |
          aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }} \
            --query "services[0].deployments"