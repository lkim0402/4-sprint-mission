spring:
  application:
    name: discodeit
  servlet:
    multipart:
      maxFileSize: 10MB # 파일 하나의 최대 크기
      maxRequestSize: 30MB  # 한 번에 최대 업로드 가능 용량
  datasource:
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    open-in-view: false
  profiles:
    active:
      - dev

# aws
#aws:
#  credentials:
#    accessKey: ${AWS_ACCESS_KEY_ID}
#    secretKey: ${AWS_SECRET_ACCESS_KEY}
#  region: ${AWS_REGION}
#  s3:
#    bucket: ${S3_BUCKET_NAME}


management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,loggers
  endpoint:
    health:
      show-details: always

info:
  name: Discodeit
  version: 1.7.0
  java:
    version: 17
  spring-boot:
    version: 3.4.0
  config:
    datasource:
      url: ${spring.datasource.url}
      driver-class-name: ${spring.datasource.driver-class-name}
    jpa:
      ddl-auto: ${spring.jpa.hibernate.ddl-auto}
    storage:
      type: ${discodeit.storage.type}
      path: ${discodeit.storage.local.root-path}
    multipart:
      max-file-size: ${spring.servlet.multipart.maxFileSize}
      max-request-size: ${spring.servlet.multipart.maxRequestSize}

discodeit:
  storage:
    #    type: local
    type: ${STORAGE_TYPE:local}  # local | s3 (기본값: local)
    local:
      #      root-path: .discodeit/storage
      root-path: ${STORAGE_LOCAL_ROOT_PATH:.discodeit/storage}
    s3:
      # AWS SDK alr knows (automatic mapping)
      access-key: ${AWS_ACCESS_KEY_ID}
      secret-key: ${AWS_SECRET_ACCESS_KEY}
      # Needed for mapping
      region: ${AWS_REGION}
      bucket: ${S3_BUCKET_NAME}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:600} # (기본값: 10분)

logging:
  level:
    root: info
