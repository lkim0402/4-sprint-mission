spring:
  application:
    name: discodeit
  servlet:
    multipart:
      maxFileSize: 50MB # 파일 하나의 최대 크기
      maxRequestSize: 100MB  # 한 번에 최대 업로드 가능 용량
  datasource:
    driver-class-name: org.postgresql.Driver
  profiles:
    active:
      - dev
  jpa:
    hibernate:
      ddl-auto: validate
    open-in-view: false
  config:
    import: optional:file:.env[.properties]
  # 캐시 설정
  cache:
    cache-names: userChannelsCache, userNotificationsCache, userCache
    type: redis
    caffeine:
      spec: >
        maximumSize=500,
        expireAfterAccess=600s,
        recordStats
      redis:
        enable-statistics: true
    data:
      redis:
        host: ${REDIS_HOST:localhost}
        port: ${REDIS_PORT:6379}
  # kafka 설정
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: discodeit-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer


management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,loggers, caches
  endpoint:
    health:
      show-details: always
  metrics:
    enable:
      cache: true
  observations:
    annotations:
      enabled: true

info:
  name: Discodeit
  version: 1.7.0
  java:
    version: 17
  spring-boot:
    version: 3.4.0
  config:
    datasource:
      url: ${spring.datasource.url}
      driver-class-name: ${spring.datasource.driver-class-name}
    jpa:
      ddl-auto: ${spring.jpa.hibernate.ddl-auto}
    storage:
      type: ${discodeit.storage.type}
      path: ${discodeit.storage.local.root-path}
    multipart:
      max-file-size: ${spring.servlet.multipart.maxFileSize}
      max-request-size: ${spring.servlet.multipart.maxRequestSize}

discodeit:
  storage:
    type: s3
    #    type: ${STORAGE_TYPE:local}  # local | s3 (기본값: local)
    local:
      root-path: ${STORAGE_LOCAL_ROOT_PATH:.discodeit/storage}
    s3:
      access-key: ${AWS_S3_ACCESS_KEY}
      secret-key: ${AWS_S3_SECRET_KEY}
      region: ${AWS_S3_REGION}
      bucket: ${AWS_S3_REGION}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:600} # (기본값: 10분)
  admin:
    username: ${DISCODEIT_ADMIN_USERNAME}
    email: ${DISCODEIT_ADMIN_EMAIL}
    password: ${DISCODEIT_ADMIN_PASSWORD}
  jwt:
    access-token:
      secret: ${JWT_ACCESS_SECRET:your-access-token-secret-key-here-make-it-long-and-random}
      expiration-ms: ${JWT_ACCESS_EXPIRATION_MS:1800000} # 30 minutes
    refresh-token:
      secret: ${JWT_REFRESH_SECRET:your-refresh-token-secret-key-here-make-it-different-and-long}
      expiration-ms: ${JWT_REFRESH_EXPIRATION_MS:604800000} # 7 days

logging:
  level:
    root: info